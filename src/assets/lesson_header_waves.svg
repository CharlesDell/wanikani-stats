<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   id="visual"
   viewBox="0 0 960 41"
   width="960"
   height="41"
   version="1.1"
   sodipodi:docname="lesson_header_waves2.svg"
   inkscape:version="1.2.1 (9c6d41e410, 2022-07-14)"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <defs
     id="defs262" />
  <sodipodi:namedview
     id="namedview260"
     pagecolor="#ffffff"
     bordercolor="#000000"
     borderopacity="0.25"
     inkscape:showpageshadow="2"
     inkscape:pageopacity="0.0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#d1d1d1"
     showgrid="false"
     inkscape:zoom="0.43703704"
     inkscape:cx="480.50847"
     inkscape:cy="270"
     inkscape:window-width="1920"
     inkscape:window-height="1137"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="visual" />
  <script
     id="script249">(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <g
     id="g268">
    <path
       d="m 0,26 14.5,1.2 c 14.5,1.1 43.5,3.5 72.7,6.3 29.1,2.8 58.5,6.2 87.6,5.8 C 204,39 233,35 262,34.2 c 29,-0.9 58,1.5 87,0.6 29,-0.8 58,-4.8 87.2,-6.5 29.1,-1.6 58.5,-1 87.6,1.4 29.2,2.3 58.2,6.3 87.2,8.1 29,1.9 58,1.5 87,0.2 29,-1.3 58,-3.7 87.2,-5 29.1,-1.3 58.5,-1.7 87.6,-0.2 29.2,1.5 58.2,4.9 72.7,6.5 L 960,41 V 0 H 945.5 C 931,0 902,0 872.8,0 843.7,0 814.3,0 785.2,0 756,0 727,0 698,0 669,0 640,0 611,0 582,0 553,0 523.8,0 494.7,0 465.3,0 436.2,0 407,0 378,0 349,0 320,0 291,0 262,0 233,0 204,0 174.8,0 145.7,0 116.3,0 87.2,0 58,0 29,0 14.5,0 H 0 Z"
       fill="#fce4f4"
       id="path251" />
    <path
       d="M 0,32 14.5,30 C 29,28 58,24 87.2,22.8 c 29.1,-1.1 58.5,0.5 87.6,1.5 29.2,1 58.2,1.4 87.2,0.4 29,-1 58,-3.4 87,-2 29,1.3 58,6.3 87.2,8 29.1,1.6 58.5,0 87.6,-2 29.2,-2 58.2,-4.4 87.2,-6 29,-1.7 58,-2.7 87,-1.5 29,1.1 58,4.5 87.2,5.8 29.1,1.3 58.5,0.7 87.6,1.3 C 902,29 931,31 945.5,32 L 960,33 V 0 H 945.5 C 931,0 902,0 872.8,0 843.7,0 814.3,0 785.2,0 756,0 727,0 698,0 669,0 640,0 611,0 582,0 553,0 523.8,0 494.7,0 465.3,0 436.2,0 407,0 378,0 349,0 320,0 291,0 262,0 233,0 204,0 174.8,0 145.7,0 116.3,0 87.2,0 58,0 29,0 14.5,0 H 0 Z"
       fill="#feb1e1"
       id="path253" />
    <path
       d="M 0,23 14.5,22.2 C 29,21.3 58,19.7 87.2,19.5 c 29.1,-0.2 58.5,1.2 87.6,0 29.2,-1.2 58.2,-4.8 87.2,-5.7 29,-0.8 58,1.2 87,1.9 29,0.6 58,0 87.2,-1 29.1,-1 58.5,-2.4 87.6,-2.7 29.2,-0.3 58.2,0.3 87.2,0.7 29,0.3 58,0.3 87,2.1 29,1.9 58,5.5 87.2,5.4 C 814.3,20 843.7,16 872.8,14.5 902,13 931,14 945.5,14.5 L 960,15 V 0 H 945.5 C 931,0 902,0 872.8,0 843.7,0 814.3,0 785.2,0 756,0 727,0 698,0 669,0 640,0 611,0 582,0 553,0 523.8,0 494.7,0 465.3,0 436.2,0 407,0 378,0 349,0 320,0 291,0 262,0 233,0 204,0 174.8,0 145.7,0 116.3,0 87.2,0 58,0 29,0 14.5,0 H 0 Z"
       fill="#ff76c8"
       id="path255" />
    <path
       d="M 0,14 14.5,12.8 C 29,11.7 58,9.3 87.2,8.7 116.3,8 145.7,9 174.8,10 c 29.2,1 58.2,2 87.2,2.2 29,0.1 58,-0.5 87,-0.5 29,0 58,0.6 87.2,0.8 29.1,0.2 58.5,-0.2 87.6,-1 C 553,10.7 582,9.3 611,8.5 640,7.7 669,7.3 698,8.2 727,9 756,11 785.2,11.5 814.3,12 843.7,11 872.8,10.5 902,10 931,10 945.5,10 H 960 V 0 H 945.5 C 931,0 902,0 872.8,0 843.7,0 814.3,0 785.2,0 756,0 727,0 698,0 669,0 640,0 611,0 582,0 553,0 523.8,0 494.7,0 465.3,0 436.2,0 407,0 378,0 349,0 320,0 291,0 262,0 233,0 204,0 174.8,0 145.7,0 116.3,0 87.2,0 58,0 29,0 14.5,0 H 0 Z"
       fill="#ff00aa"
       id="path257" />
  </g>
</svg>
